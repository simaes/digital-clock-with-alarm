;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <stdio.h>
;#include <delay.h>
;
;char ref[]={0xFE, 0xFD, 0xFB, 0xF7};

	.DSEG
;int keys[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0};
;unsigned long int key_value, inputcounter;
;char keypad();
;void display();
;void alarm();
;
;char st[16];
;int sec=0, min=0, hour=0;
;int min_alm=0, hour_alm=0;
;char status[2][8] = {"!SET","SET"};
;int if_started=0, if_alarm=0;
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0015 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0016  if(if_started==1){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0017     if (sec<60)
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0018     {
; 0000 0019         sec++;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001A     }
; 0000 001B 
; 0000 001C     if (sec==60)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001D     {
; 0000 001E         if (min<60)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001F         {
; 0000 0020             min++;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0021         }
; 0000 0022         sec=0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0023     }
; 0000 0024 
; 0000 0025     if (min==60)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0026     {
; 0000 0027         if (hour<24)
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0028         {
; 0000 0029             hour++;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002A         }
; 0000 002B         min=0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002C     }
; 0000 002D 
; 0000 002E     if (hour==24)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002F 
; 0000 0030     {
; 0000 0031         hour=0;
;PCODE: $00000034 VOL: 0
; 0000 0032     }
; 0000 0033    }
;PCODE: $00000035 VOL: 0
; 0000 0034 }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;
;void main(void)
; 0000 0037 {
;PCODE: $0000003A VOL: 0
; 0000 0038 DDRC = 0x00;    //input
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0039 PORTC = 0xFF;   //Pull up
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 003A DDRD = 0xFF;    //output
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003B 
; 0000 003C DDRB = 0xFF;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003D PORTB.5 = 0xFF;   //output
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003E PORTB.4 = 0xFF;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 003F PORTB.0= 0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0040 
; 0000 0041 lcd_init(16);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0042 
; 0000 0043 // Timer/Counter 1 initialization
; 0000 0044 // Clock source: System Clock
; 0000 0045 // Clock value: 0.977 kHz
; 0000 0046 // Mode: CTC top=OCR1A
; 0000 0047 // OC1A output: Disconnected
; 0000 0048 // OC1B output: Disconnected
; 0000 0049 // Noise Canceler: Off
; 0000 004A // Input Capture on Falling Edge
; 0000 004B // Timer Period: 1.024 ms
; 0000 004C // Timer1 Overflow Interrupt: Off
; 0000 004D // Input Capture Interrupt: Off
; 0000 004E // Compare A Match Interrupt: On
; 0000 004F // Compare B Match Interrupt: Off
; 0000 0050 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0051 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0052 OCR1A=815;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0053 
; 0000 0054 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0055 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0056 
; 0000 0057 // Global enable interrupts
; 0000 0058 #asm("sei")
;PCODE: $00000053 VOL: 0
	sei
;PCODE: $00000054 VOL: 0
; 0000 0059 
; 0000 005A while(1)
;PCODE: $00000055 VOL: 0
; 0000 005B       {
; 0000 005C         keypad();
;PCODE: $00000056 VOL: 0
; 0000 005D         display();
;PCODE: $00000057 VOL: 0
; 0000 005E         alarm();
;PCODE: $00000058 VOL: 0
; 0000 005F       }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0060 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;char keypad()
; 0000 0063 {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0064 while(1)
;PCODE: $00000060 VOL: 0
; 0000 0065 {
; 0000 0066     int row=0, col=-1, pos=-1;
; 0000 0067     for(row=0; row<4; row++)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;	row -> Y+4
;	col -> Y+2
;	pos -> Y+0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0068     {
; 0000 0069         PORTD = ref[row];
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 006A         if(PINC.0==0)
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 006B         {
; 0000 006C             while(PINC.0==0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006D             col=0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 006E             break;
;PCODE: $00000087 VOL: 0
; 0000 006F         }
; 0000 0070         if(PINC.1==0)
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0071         {
; 0000 0072             while(PINC.1==0);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0073             col=1;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0074             break;
;PCODE: $00000094 VOL: 0
; 0000 0075         }
; 0000 0076         if(PINC.2==0)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0077         {
; 0000 0078             while(PINC.2==0);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0079             col=2;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 007A             break;
;PCODE: $000000A1 VOL: 0
; 0000 007B         }
; 0000 007C     }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 007D     if(col != -1)
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 007E     {
; 0000 007F         pos = row*3+col;  // r,c=0 pos=0, r=1,c=2 pos=5
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0080         inputcounter = ( inputcounter *10 ) + keys[pos];
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0081         if(pos == 9){
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0082             key_value = ( inputcounter / 10 ) ;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0083             inputcounter = 0;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0084             //Format: hhmm
; 0000 0085             min = key_value%100;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0086             hour = key_value/100;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0087             if(min>60)
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0088             {
; 0000 0089             min = min%60;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 008A             hour = hour + 1;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 008B             }
; 0000 008C             if_started=1;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 008D             lcd_clear();
;PCODE: $000000DD VOL: 0
; 0000 008E         }
; 0000 008F         if(pos == 11){
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0090             key_value = ( inputcounter / 10 ) ;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0091             inputcounter = 0;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0092             //Format: hhmm
; 0000 0093             min_alm = key_value%100;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0094             hour_alm = key_value/100;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0095             if(min_alm>60)
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0096             {
; 0000 0097             min_alm = min_alm%60;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0098             hour_alm = hour_alm + 1;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0099             }
; 0000 009A             if_alarm=1;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 009B             lcd_clear();
;PCODE: $000000FD VOL: 0
; 0000 009C         }
; 0000 009D     }
;PCODE: $000000FE VOL: 0
; 0000 009E     return 0;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 009F }
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00A0 }
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;
;void display()
; 0000 00A3 {
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00A4    sprintf(st, "%i:%i:%i ALM:%s", hour, min, sec, status + if_alarm);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00A5    lcd_gotoxy(0,0);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00A6    lcd_puts(st);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00A7 
; 0000 00A8    sprintf(st, "ALARM: %i:%i", hour_alm, min_alm);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00A9    lcd_gotoxy(0,1);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00AA    lcd_puts(st);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00AB }
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;
;void alarm()
; 0000 00AE {
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00AF     if((hour==hour_alm)&&(min==min_alm))
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00B0     {
; 0000 00B1       if(if_alarm){
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00B2         PORTB.6=1;  //buzzer on
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00B3         PORTB.0=1; //led on
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00B4       }
; 0000 00B5     }
;PCODE: $00000151 VOL: 0
; 0000 00B6     else
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00B7     {
; 0000 00B8        PORTB.6=0; //buzzer off
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00B9        PORTB.0=0; //led off
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00BA     }
;PCODE: $00000158 VOL: 0
; 0000 00BB     if(PINB.5==0)
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00BC     {
; 0000 00BD         PORTB.6=0; //buzzer off
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00BE         PORTB.0=0; //led off
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00BF     }
; 0000 00C0     else if(PINB.4==0)
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00C1     {
; 0000 00C2         if((if_alarm==1)&&(hour==hour_alm)&&(min==min_alm))
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00C3         {
; 0000 00C4             while(PINB.4==0);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00C5             min_alm = min_alm + 2;  //delay for 2min
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00C6             PORTB.6=0; //buzzer off
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00C7             PORTB.0=0; //led off
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00C8         }
; 0000 00C9     }
;PCODE: $0000017F VOL: 0
; 0000 00CA }
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
